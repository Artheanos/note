{"version":3,"sources":["util.js","auth/index.js","LoginPage.js","NotePage.js","App.js","reportWebVitals.js","index.js"],"names":["useInput","initValue","useState","value","setValue","onChange","e","target","input","init","a","fetch","credentials","response","text","alert","myFetchPost","body","expectedStatus","JSON","stringify","console","log","method","headers","status","Error","isLoggedIn","result","Cookies","get","Boolean","PrivateRoute","Component","component","rest","render","props","to","pathname","state","from","location","LoginPage","email","emailProps","password","passwordProps","Container","className","Row","Col","style","fontSize","lineHeight","Form","onSubmit","event","preventDefault","then","history","push","catch","maxWidth","width","Group","Label","Control","type","Button","NotePage","note","setNote","noteProps","prevNote","setPrevNote","useEffect","myFetch","val","button","variant","as","onClick","remove","logout","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a01ab77.chunk.js","sourcesContent":["import { useState } from 'react';\r\n\r\nexport function useInput(initValue) {\r\n    const [value, setValue] = useState(initValue);\r\n    const onChange = (e) => setValue(e.target.value);\r\n\r\n    return [value, setValue, { value, onChange }];\r\n}\r\n\r\n/**\r\n * @param {string} input\r\n * @param {RequestInit=} init\r\n */\r\nexport async function myFetch(input, init) {\r\n    try {\r\n        let response = await fetch('http://localhost:3000/api/' + input, { ...init, credentials: 'include' });\r\n        return await response.text();\r\n    } catch (e) {\r\n        alert(e);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @param {string} input\r\n * @param {any} body\r\n * @param {number} expectedStatus\r\n * @param {RequestInit=} init\r\n * \r\n * @returns {Promise<string>}\r\n */\r\nexport async function myFetchPost(input, body, expectedStatus = 200, init) {\r\n    if (typeof body !== \"string\") {\r\n        body = JSON.stringify(body);\r\n    }\r\n    console.log(body);\r\n    let response = await fetch('http://localhost:3000/api/' + input, {\r\n        ...init,\r\n        body,\r\n        method: \"POST\",\r\n        credentials: 'include',\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    });\r\n    if (response.status === expectedStatus) {\r\n        return await response.text();\r\n    } else {\r\n        alert(\"Wrong status\");\r\n        throw Error(\"Wrong status\");\r\n    }\r\n}","import Cookies from 'universal-cookie';\r\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\r\n\r\n\r\nexport function isLoggedIn() {\r\n    let result = new Cookies().get('sessionId');\r\n    console.log(result);\r\n    return Boolean(result);\r\n}\r\n\r\nexport function logout(history) {\r\n    new Cookies().remove('sessionId');\r\n    history.push('/login');\r\n}\r\n\r\nexport function PrivateRoute({ component: Component, ...rest }) {\r\n    return (\r\n        <Route {...rest} render={(props) => {\r\n            if (isLoggedIn()) {\r\n                return <Component {...props} />\r\n            } else {\r\n                return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n            }\r\n        }} />\r\n    )\r\n}","import { Col, Button, Form, Container, Row } from \"react-bootstrap\";\r\nimport { myFetchPost, useInput } from './util';\r\nimport { isLoggedIn } from './auth';\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nexport default function LoginPage(props) {\r\n    const [email, , emailProps] = useInput('admin@admin.pl');\r\n    const [password, , passwordProps] = useInput('admin');\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault();\r\n        myFetchPost('login', { email, password })\r\n            .then(() => props.history.push('/note'))\r\n            .catch(alert);\r\n    }\r\n\r\n    if (isLoggedIn()) {\r\n        return (\r\n            <Redirect to=\"/note\" />\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container className=\"text-light\">\r\n            <Row>\r\n                <Col className=\"text-center\">\r\n                    <h1 className=\"mb-3\" style={{ fontSize: 'calc(1.525rem + 3.3vw)', lineHeight: \"1\" }}>Note</h1>\r\n                    <p className=\"lead\">Use any email you'd like - if it hasn't been used before a new note will be created anyways</p>\r\n                    <p className=\"lead\">Password - admin</p>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"justify-content-center\">\r\n                <Form onSubmit={handleSubmit} style={{ maxWidth: '768px', width: '100%' }}>\r\n                    <Form.Group>\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control {...emailProps} type=\"email\" />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control {...passwordProps} type=\"password\" />\r\n                    </Form.Group>\r\n                    <Button type=\"submit\">Submit</Button>\r\n                </Form>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\nimport { Container, Form, Button, Row } from \"react-bootstrap\";\r\nimport { logout } from \"./auth\";\r\nimport { myFetch, myFetchPost, useInput } from \"./util\";\r\n\r\nexport default function NotePage({ history }) {\r\n    const [note, setNote, noteProps] = useInput('');\r\n    const [prevNote, setPrevNote] = useState('');\r\n\r\n    useEffect(() => {\r\n        myFetch(\"note\").then(val => {\r\n            setNote(val);\r\n            setPrevNote(val);\r\n        });\r\n    }, []);\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        myFetchPost(\"note\", { note }).then(() => setPrevNote(note));\r\n    }\r\n\r\n    const button = (\r\n        note === prevNote\r\n            ? <Button variant=\"success\" className=\"mt-2 mr-2 disabled\" style={{ width: '7rem' }}>Saved</Button>\r\n            : <Button className=\"mt-2 mr-2\" style={{ width: '7rem' }} type=\"submit\">Save</Button>\r\n    );\r\n\r\n    return (\r\n        <div className=\"NotePage\">\r\n            <Container>\r\n                <Row className=\"justify-content-center\">\r\n                    <Form onSubmit={handleSubmit} style={{ maxWidth: '768px', width: '100%' }}>\r\n                        <Form.Control as=\"textarea\" {...noteProps} />\r\n                        {button}\r\n                        <Button className=\"mt-2 mr-2\" variant=\"warning\" onClick={() => logout(history)}>Log Out</Button>\r\n                    </Form>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","import LoginPage from './LoginPage';\nimport NotePage from './NotePage';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { PrivateRoute } from './auth';\n\nfunction App() {\n  return (\n    <div className=\"App py-5 px-1 px-md-3\">\n      <Router>\n        <Route path=\"/\" exact>\n          <Redirect to=\"/login\" />\n        </Route>\n        <Route path=\"/login\" component={LoginPage} />\n        <PrivateRoute path=\"/note\" component={NotePage} />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}